# -*- coding: utf-8 -*-
"""2022driverstats

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aBlYIfpEy8YYd3b0b8Yg7uWaziAjI-di
"""

# import libaries
import pandas as pd
from google.colab import files
import io

pd.options.mode.chained_assignment = None

# upload .csv files from local desktop
uploaded = files.upload()

# read .csv files into dataframes
qualis2022 = pd.read_csv(io.StringIO(uploaded['qualis2022.csv'].decode('utf-8')))
starts2022 = pd.read_csv(io.StringIO(uploaded['starts2022.csv'].decode('utf-8')))
sprints2022 = pd.read_csv(io.StringIO(uploaded['sprints2022.csv'].decode('utf-8')))
results2022 = pd.read_csv(io.StringIO(uploaded['results2022.csv'].decode('utf-8')))
flaps2022 = pd.read_csv(io.StringIO(uploaded['flaps2022.csv'].decode('utf-8')))

# select the needed columns
qualis2022 = qualis2022[['No','Driver','Car','Pos','Q1','Q2','Q3','Laps','race_name','race_num']]
starts2022 = starts2022[['Driver','Car','Pos','race_name','race_num']]
sprints2022 = sprints2022[['No','Driver','Car','Pos','Laps','Time/Retired','PTS','race_name','race_num']]
results2022 = results2022[['No','Driver','Car','Pos','Laps','Time/Retired','PTS','race_name','race_num']]
flaps2022 = flaps2022[['No','Driver','Pos','Car','Lap','Time of day','Time','Avg Speed','race_name','race_num']]

# create a teammates dataframe
pairs = [['Max Verstappen VER','Sergio Perez PER'],
         ['Carlos Sainz SAI','Charles Leclerc LEC'],
         ['George Russell RUS	','Lewis Hamilton HAM'],
         ['Lando Norris NOR','Daniel Ricciardo RIC'],
         ['Fernando Alonso ALO','Esteban Ocon OCO'],
         ['Zhou Guanyu ZHO','Valtteri Bottas BOT'],
         ['Kevin Magnussen MAG','Mick Schumacher MSC'],
         ['Yuki Tsunoda TSU','Pierre Gasly GAS'],
         ['Sebastian Vettel VET','Lance Stroll STR'],
         ['Alexander Albon ALB','Nicholas Latifi LAT']]
  
# Create the pandas DataFrame with column name is provided explicitly
teammates2022 = pd.DataFrame(pairs, columns=['Driver','Teammate'])
  
# print dataframe.
teammates2022

"""All stats in separate dataframes"""

allresults2022 = pd.concat([results2022, sprints2022], ignore_index=True)
# driver 
driverpoints = allresults2022.groupby(['Driver','Car'])[['PTS']].sum().sort_values(by='PTS',ascending=False)

# team points
teampoints = allresults2022.groupby(['Car'])[['PTS']].sum().sort_values(by='PTS',ascending=False)

# driver percentage of team points
allpoints = driverpoints.join(teampoints,lsuffix='_driver', rsuffix='_team')
allpoints['PTS_share'] = allpoints['PTS_driver']/allpoints['PTS_team']

# number of wins
results2022['win'] = results2022['Pos']=='1'
len(results2022[results2022['win']==True]) # confirm 11 wins
wins = results2022.groupby('Driver')[['win']].sum().sort_values(by='win',ascending=False)

# number of podiums
finishresults2022 = results2022[(results2022['Time/Retired']!='DNF')&(results2022['Time/Retired']!='DNS')]
finishresults2022['Pos'] = pd.to_numeric(finishresults2022['Pos'])

finishresults2022['podium'] = (finishresults2022['Pos']<4)
len(finishresults2022[finishresults2022['podium']==True]) # confirm 33 podiums
podiums = finishresults2022.groupby('Driver')[['podium']].sum().sort_values(by='podium',ascending=False)

# average finish position
avgfin = finishresults2022.groupby('Driver')[['Pos']].mean().sort_values(by='Pos',ascending=True)
avgfin = avgfin.rename(columns={'Pos':'finPos'})

# number of fastest laps
flaps2022['fastest'] = (flaps2022['Pos']==1)
flaps = flaps2022.groupby('Driver')[['fastest']].sum().sort_values(by='fastest',ascending=False)

# number of DNFs
results2022['DNF'] = (results2022['Time/Retired']=='DNF')
dnfs = results2022.groupby('Driver')[['DNF']].sum().sort_values(by='DNF',ascending=False)

# number of DNSs
results2022['DNS'] = (results2022['Time/Retired']=='DNS')
dnss = results2022.groupby('Driver')[['DNS']].sum().sort_values(by='DNS',ascending=False)

# number of race laps
laps = results2022.groupby('Driver')[['Laps']].sum().sort_values(by='Laps',ascending=False)

# average qualifying position
finishqualis2022 = qualis2022[qualis2022['Pos']!='NC']
finishqualis2022['Pos'] = pd.to_numeric(finishqualis2022['Pos'])

avgquali = finishqualis2022.groupby('Driver')[['Pos']].mean().sort_values(by='Pos',ascending=True)
avgquali = avgquali.rename(columns={'Pos':'qualiPos'})

# Number of Q3 appearances
finishqualis2022['madeQ3'] = finishqualis2022['Pos']<11
q3s = finishqualis2022.groupby('Driver')[['madeQ3']].sum().sort_values(by='madeQ3',ascending=False)

# Number of Q2 appearances
finishqualis2022['madeQ2'] = finishqualis2022['Pos']<16
q2s = finishqualis2022.groupby('Driver')[['madeQ2']].sum().sort_values(by='madeQ2',ascending=False)

"""Combining all dataframes together


"""

def leftjoins(x):
  if len(x)==1:
    return x
  else:
    return x[0].join(leftjoins(x[1:]))

dfs = [allpoints,wins,podiums,avgfin,flaps,dnfs,dnss,laps,q3s,q2s,avgquali]

final = leftjoins(dfs)

"""Download dataframe as .csv file"""

final.to_csv('final.csv')

files.download('final.csv')